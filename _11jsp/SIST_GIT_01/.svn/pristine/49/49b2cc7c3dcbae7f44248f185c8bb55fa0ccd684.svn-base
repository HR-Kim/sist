package com.Dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import com.Beans.Ya_NoticeBean;
import com.Beans.Ya_QnaBean;

public class QnaDao implements WorkArea {


	private boolean isS = true;
	private static QnaDao qnaDao;
	
	private QnaDao() {
		try{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			log("1/6 Success");
		}catch(ClassNotFoundException e){
			log("1/6 Fail", e);
		}
	}
	
	public static QnaDao getInstance(){
		if(qnaDao == null){
			qnaDao = new QnaDao();
		}
		return qnaDao;
	}
	
	public Connection getConnection() throws SQLException{
		Connection conn = null;
		String url = "jdbc:oracle:thin:@localhost:1521:xe";
		String user = "hr";
		String password = "hr";
		
		
		conn = DriverManager.getConnection(url, user, password);
		return conn;
	}
	
	public void close(Connection conn, Statement stmt, ResultSet rs){
		if(rs != null){
			try{
				rs.close();
			}catch(SQLException e){
				e.printStackTrace();
			}
			
		}
		if(stmt != null){
			try{
				stmt.close();
			}catch(SQLException e){
				e.printStackTrace();
			}
			
		}
		if(conn != null){
			try{
				conn.close();
			}catch(SQLException e){
				e.printStackTrace();
			}
			
		}
	}
	
	public void close(Connection conn, Statement stmt){
		if(stmt != null){
			try{
				stmt.close();
			}catch(SQLException e){
				e.printStackTrace();
			}
			
		}
		if(conn != null){
			try{
				conn.close();
			}catch(SQLException e){
				e.printStackTrace();
			}
			
		}
	}
	
	public void log(String msg){
		if(isS){
			System.out.println(getClass() + ": " + msg);
		}
	}
	
	public void log(String msg, Exception e){
		if(isS){
			System.out.println(e + " : " + getClass() + " : " + msg);
		}
	}
	@Override
	public ArrayList<Object> do_search(int pageNum, int pageSize, String search_div, String search_word) {
		return null;
	}
	
	public ArrayList<Object> do_search(String email, int pageNum, int pageSize, String search_div, String search_word) {
		Connection conn = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		
		StringBuilder sql = new StringBuilder();
		
		
		sql.append("SELECT X.*                                                                                                                          \n");
		sql.append("FROM                                                                                                                                \n");
		sql.append("  (SELECT ROWNUM AS RNUM, A.*, B.*                                                                                                  \n");
		sql.append("  FROM (SELECT *                                                                                                                    \n");
		sql.append("           FROM ya_QNA a WHERE EXISTS (SELECT 1                                                                                     \n");
		sql.append("      			FROM YA_QNA b                                                                                                       \n");
		sql.append("		      WHERE EMAIL=?                                                                             \n");
		sql.append("		      AND a.refer=b.refer                                                                                                   \n");
		sql.append("             )                                                                                                                      \n");
		sql.append("    AND a."+ search_div + " LIKE '%" + search_word + "%'                                                                            \n");
		sql.append("    ORDER BY a.REFER DESC,                                                                                                          \n");
		sql.append("      STEP ASC                                                                                                                      \n");
		sql.append("    ) A NATURAL                                                                                                                     \n");
		sql.append("  JOIN                                                                                                                              \n");
		sql.append("    (SELECT COUNT(*) AS TOT_CNT                                                                                                     \n");
		sql.append("    FROM YA_QNA c                                                                                                                   \n");
		sql.append("    WHERE EXISTS                                                                                                                    \n");
		sql.append("      (SELECT 1                                                                                                                     \n");
		sql.append("      FROM YA_QNA b                                                                                                                 \n");
		sql.append("    WHERE c."+ search_div + " LIKE '%" + search_word + "%'                                                                            \n");
		sql.append("      AND EMAIL=?                                                                                         \n");
		sql.append("      AND c.refer=b.refer                                                                                                           \n");
		sql.append("      )                                                                                                                             \n");
		sql.append("    ) B                                                                                                                             \n");
		sql.append("  ) X                                                                                                                               \n");
		sql.append("WHERE RNUM BETWEEN (" + pageSize + " * (" + pageNum + " -1)+1) AND (( " + pageSize + " * (" + pageNum + " -1))+ " + pageSize + " ) \n");
		  
		ArrayList<Object> list = new ArrayList<Object>();
		System.out.println(sql.toString());
		try{
			conn = getConnection();
			
			psmt = conn.prepareStatement(sql.toString());
			psmt.setString(1, email);
			psmt.setString(2, email);
			
			rs = psmt.executeQuery();	
			
			while(rs.next()){
				Ya_QnaBean bean = new Ya_QnaBean();
				
				bean.setSeq(rs.getInt("seq"));
				bean.setEmail(rs.getString("email"));
				bean.setTitle(rs.getString("title"));
				bean.setContent(rs.getString("content"));
				bean.setUpload_dt(rs.getString("upload_dt"));
				bean.setRefer(rs.getInt("refer"));
				bean.setStep(rs.getInt("step"));
				bean.setDepth(rs.getInt("depth"));
				bean.setDel(rs.getInt("del"));
				bean.setIs_ans(rs.getInt("is_ans"));
				bean.setTot_cnt(rs.getInt("tot_cnt"));
				list.add(bean);
			}
		}catch(SQLException e){
			log("큐엔에이 써치 실패", e);
			list = null;
		}finally {
			this.close(conn, psmt, rs);
		}
		
		return list;
	}

	@Override
	public boolean do_insert(Object bean) {
		Connection conn = null;
		PreparedStatement psmt = null;
		
		StringBuilder sql = new StringBuilder();
		Ya_QnaBean castbean = (Ya_QnaBean) bean;
		
		sql.append("INSERT                                                \n");
		sql.append("INTO YA_QNA VALUES                                    \n");
		sql.append("  (                                                   \n");
		sql.append("    seq_ya_qna.nextval,                               \n");
		sql.append("    ?,						                          \n");
		sql.append("    ?,                         			              \n");
		sql.append("    ?,                                  		      \n");
		sql.append("    SYSDATE,                                          \n");
		sql.append("    (SELECT NVL(MAX(REFER),0)+1 FROM YA_QNA),0,0,0,0  \n");
		sql.append("  )                                                   \n");
		int count = 0;
		try{
			conn = getConnection();
			psmt = conn.prepareStatement(sql.toString());
			
			psmt.setString(1, castbean.getEmail());
			psmt.setString(2, castbean.getTitle());
			psmt.setString(3, castbean.getContent());
			
			count = psmt.executeUpdate();
			
		}catch(SQLException e){
			log("큐앤에이 인서트 실패!", e);
		}
		return count>0 ? true : false;
	}

	@Override
	public boolean do_update(Object bean) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean do_delete(Object bean) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean do_upsert(Object bean) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object do_detail(int seq) {
		Connection conn = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		
		Ya_QnaBean bean = null;
		StringBuilder sql = new StringBuilder();
		
		sql.append("SELECT SEQ, EMAIL, TITLE, CONTENT, UPLOAD_DT, REFER, STEP, DEPTH\n");
		sql.append("FROM YA_QNA                                                     \n");
		sql.append(" WHERE REFER =(SELECT REFER FROM YA_QNA WHERE SEQ=?)            \n");
		sql.append("ORDER BY REFER DESC, STEP ASC                                   \n");


		try{
			conn = getConnection();
			
			psmt = conn.prepareStatement(sql.toString());
			
			psmt.setInt(1, seq);
			
			rs = psmt.executeQuery();	
			System.out.println(sql.toString());
			while(rs.next()){
				bean = new Ya_QnaBean();
				
				bean.setContent(rs.getString("content"));
				bean.setTitle(rs.getString("title"));
				bean.setUpload_dt(rs.getString("upload_dt"));
				
			}
		}catch(SQLException e){
			log("공지사항 디테일 실패", e);
			bean = null;
		}finally {
			this.close(conn, psmt, rs);
		}
		
		return bean;
	}

}
