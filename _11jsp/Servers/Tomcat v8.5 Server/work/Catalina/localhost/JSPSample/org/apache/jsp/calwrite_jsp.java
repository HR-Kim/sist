/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.9
 * Generated at: 2017-01-31 03:28:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Calendar;
import com.sist.Member;

public final class calwrite_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("com.sist.Member");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

request.setCharacterEncoding("UTF-8");

      out.write("\r\n");
      out.write("\r\n");

String year = request.getParameter("year");
String month = request.getParameter("month");
String day = request.getParameter("day");

System.out.println(year + "년" + month + "월" + day + "일");

Member user = (Member)session.getAttribute("login");



Calendar cal = Calendar.getInstance();
int tyear = cal.get(Calendar.YEAR);
int tmonth = cal.get(Calendar.MONTH) + 1;
int tday = cal.get(Calendar.DATE);
int thour = cal.get(Calendar.HOUR);
int tmin = cal.get(Calendar.MINUTE);

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form action=\"calwriteAf.jsp\" method=\"post\">\r\n");
      out.write("<h2>일정쓰기</h2>\r\n");
      out.write("<table border=\"1\">\r\n");
      out.write("<col width=\"200\"><col width=\"500\">\r\n");
      out.write("<tr>\r\n");
      out.write("\t<td>아이디</td>\r\n");
      out.write("\t<td>\r\n");
      out.write("\t\t");
      out.print(user.getId() );
      out.write("\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"id\" value=\"");
      out.print(user.getId());
      out.write("\">\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<td>제목</td>\r\n");
      out.write("\t<td>\r\n");
      out.write("\t\t<input type=\"text\" name=\"title\" size=\"60\">\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<td>일정</td>\r\n");
      out.write("\t<td>\r\n");
      out.write("\t\t<select name=\"year\">\r\n");
      out.write("\t\t");

		for(int i=tyear-5; i < tyear+6; ++i){
		
      out.write("\r\n");
      out.write("\t\t\t<option ");
      out.print(year.equals(i+"")?"selected='selected'":"" );
      out.write(" value=\"");
      out.print(i);
      out.write('"');
      out.write('>');
      out.print(i );
      out.write("</option>\r\n");
      out.write("\t\t");
	
		}
		
      out.write("\r\n");
      out.write("\t\t</select>년\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<select name=\"month\">\r\n");
      out.write("\t\t");

		for(int i = 1; i<= 12; i++){
		
      out.write("\r\n");
      out.write("\t\t\t<option ");
      out.print(month.equals(i+"")?"selected='selected'":"" );
      out.write("\r\n");
      out.write("\t\t\t value=\"");
      out.print(i);
      out.write('"');
      out.write('>');
      out.print(i );
      out.write("</option>\r\n");
      out.write("\t\t");

		}
		
      out.write("\r\n");
      out.write("\t\t</select>월\r\n");
      out.write("\t\t<select name=\"day\">\r\n");
      out.write("\t\t");

		for(int i = 1; i<=cal.getActualMaximum(Calendar.DAY_OF_MONTH); ++i){
		
      out.write("\r\n");
      out.write("\t\t\t<option ");
      out.print(day.equals(i+"")?"selected='selected'":"" );
      out.write("\r\n");
      out.write("\t\t\tvalue=\"");
      out.print(i);
      out.write('"');
      out.write('>');
      out.print(i );
      out.write("</option>\r\n");
      out.write("\t\t");
	
		}
		
      out.write("\r\n");
      out.write("\t\t</select>일\r\n");
      out.write("\t\t<select name=\"hour\">\r\n");
      out.write("\t\t");

		for(int i = 0; i<24; ++i){
		
      out.write("\r\n");
      out.write("\t\t\t<option ");
      out.print((thour+"").equals(i+"")?"selected='selected'":"" );
      out.write("\r\n");
      out.write("\t\t\tvalue=\"");
      out.print(i);
      out.write('"');
      out.write('>');
      out.print(i );
      out.write("</option>\r\n");
      out.write("\t\t");
	
		}
		
      out.write("\r\n");
      out.write("\t\t</select>시\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<select name=\"min\">\r\n");
      out.write("\t\t");

		for(int i = 0; i<60; ++i){
		
      out.write("\r\n");
      out.write("\t\t\t<option ");
      out.print((thour+"").equals(i+"")?"selected='selected'":"" );
      out.write("\r\n");
      out.write("\t\t\tvalue=\"");
      out.print(i);
      out.write('"');
      out.write('>');
      out.print(i );
      out.write("</option>\r\n");
      out.write("\t\t");
	
		}
		
      out.write("\r\n");
      out.write("\t\t</select>분\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("\t<td>내용</td>\r\n");
      out.write("\t<td>\r\n");
      out.write("\t<textarea cols=\"60\" rows=\"20\" name=\"content\"></textarea>\r\n");
      out.write("\t</td>\r\n");
      out.write("\t\r\n");
      out.write("</tr>\r\n");
      out.write("\r\n");
      out.write("<tr>\r\n");
      out.write("\t<td colspan=\"2\">\r\n");
      out.write("\t\t<input type=\"submit\" value=\"글쓰기\">\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("</table>\r\n");
      out.write("</form>\r\n");

String url = String.format("%s?year=%s&month=%s", "calendar.jsp", year, month);

      out.write("\r\n");
      out.write("<a href=\"");
      out.print(url);
      out.write("\">일정보기</a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
