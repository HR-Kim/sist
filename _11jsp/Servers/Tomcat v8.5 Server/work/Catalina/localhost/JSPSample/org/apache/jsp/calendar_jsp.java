/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.9
 * Generated at: 2017-01-31 07:54:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.sist.Member;
import com.sist.CalAccess;
import java.util.List;
import com.sist.Cal;
import java.util.Calendar;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


public boolean nvl(String msg){
	return msg == null || msg.trim().equals("") ? true : false;	//빈문자이거나 null일때 true
}

public String callist(int year, int month, int day){
	String s = "";
	s += String.format("<a href='%s?year=%d&month=%d&day=%d'>", "callist.jsp", year, month, day);
	s += String.format("%2d", day);
	s += "</a>";
	return s;
}

public String showpen(int year, int month, int day){
	String s = "";
	String url = "calwrite.jsp";
	String image = "<img src='./image/pen.gif'>";
	s = String.format("<a href='%s?year=%d&month=%d&day=%d'>%s</a>", url, year, month, day, image);
	
	return s;
}

public String two(String msg){	//한자리를 두자리로 만들어 주는 함수
	return msg.trim().length()<2 ? "0" + msg : msg.trim();
}
//제목이 15자 이상이면...표시한다.
public String dot3(String msg){
	String s = "";
	if(msg.length() >= 15){
		s = msg.substring(0, 15);
		s += "...";
	}else{
		s = msg.trim();
	}
	return s;
}

public String makeTable(int year, int month, int day, List<Cal> calList){
	String s = "";
	String dates = (year+"") + two(month+"") + two(day+"");
	s = "<table>";
	s += "<col width='98'/>";
	
	for(Cal lcd:calList){
		System.out.println(lcd);
		if(lcd.getRdate().substring(0, 8).equals(dates)){
			s += "<tr bgcolor='pink' class='small'>";
			s += "<td>";
			s += "<a href='caldetail.jsp?seq=" + lcd.getSeq() + "'>";
			s += "<font style='font-size:8px; color:red'>";
			s += dot3(lcd.getTitle());
			s += "</font>";
			s += "</a>";
			s += "</td>";
			s += "</tr>";
		}		
	}
	s += "</table>";
	return s;	
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("com.sist.Member");
    _jspx_imports_classes.add("com.sist.CalAccess");
    _jspx_imports_classes.add("com.sist.Cal");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>calendar.jsp</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("#big{\r\n");
      out.write("\tborder-collapse: collapse;\r\n");
      out.write("\twidth: 700px;\r\n");
      out.write("\tborder: 1;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("table, td, th{\r\n");
      out.write("\tborder: 1px solid black;\r\n");
      out.write("}\r\n");
      out.write("tr{\r\n");
      out.write("\theight: 100px;\r\n");
      out.write("}\r\n");
      out.write(".small{\r\n");
      out.write("\theight: 20px;\r\n");
      out.write("\tborder: none;\r\n");
      out.write("}\r\n");
      out.write("tr.date{\r\n");
      out.write("\tfont-size: 30px;\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("}\r\n");
      out.write(".t1{\r\n");
      out.write("\tmargin: auto;\r\n");
      out.write("\twidth: 706px;\r\n");
      out.write("\tborder: 3px solid #8AC007;\r\n");
      out.write("\tpadding: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h1>달력</h1>\r\n");
      out.write("\r\n");

Calendar cal = Calendar.getInstance();
cal.set(Calendar.DATE, 1);

String syear = request.getParameter("year");
String smonth = request.getParameter("month");

int year = cal.get(Calendar.YEAR);
if(!nvl(syear)){
	year = Integer.parseInt(syear);
}
int month = cal.get(Calendar.MONTH) + 1;
if(!nvl(smonth)){
	month = Integer.parseInt(smonth);
}

if(month<1){month = 12; year--;}
if(month>12){month = 1; year++;}

cal.set(year, month-1, 1);

int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);
//요일 1 ~ 7

CalAccess access = CalAccess.getInstance();

Member user = (Member)session.getAttribute("login");

List<Cal> calList = access.calList(user.getId(), year+two(month+""));

/* String sf = String.format("%d년 %d월", year, month);

String sleft = String.format("calendar.jsp?year=%d&month=%d", year, month-1);
String sright = String.format("calendar.jsp?year=%d&month=%d", year, month+1); */

String pp = String.format("<a href='%s?year=%d&month=%d'><img src='image/left.gif'></a>",
		"calendar.jsp", year-1, month);
String p = String.format("<a href='%s?year=%d&month=%d'><img src='image/prev.gif'></a>",
		"calendar.jsp", year, month-1);
String nn = String.format("<a href='%s?year=%d&month=%d'><img src='image/last.gif'></a>",
		"calendar.jsp", year+1, month);
String n = String.format("<a href='%s?year=%d&month=%d'><img src='image/next.gif'></a>",
		"calendar.jsp", year, month+1);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"t1\">\r\n");
      out.write("<table border=\"1\" id=\"big\">\r\n");
      out.write("<col width=\"100\"><col width=\"100\"><col width=\"100\">\r\n");
      out.write("<col width=\"100\"><col width=\"100\"><col width=\"100\">\r\n");
      out.write("<col width=\"100\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<tr height=\"100\">\r\n");
      out.write("\t<td colspan=\"7\" align=\"center\">\r\n");
      out.write("\t\t");
      out.print(pp );
      out.write("\r\n");
      out.write("\t\t");
      out.print(p );
      out.write("\r\n");
      out.write("\t\t\t<font color=\"red\" style=\"font-size: 50\">\r\n");
      out.write("\t\t\t\t");
      out.print(String.format("%d년&nbsp;&nbsp;%d월", year, month) );
      out.write("\r\n");
      out.write("\t\t\t</font>\r\n");
      out.write("\t\t");
      out.print(n );
      out.write("\r\n");
      out.write("\t\t");
      out.print(nn );
      out.write("\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr class=\"date\">\r\n");
      out.write("\t<td>일</td>\r\n");
      out.write("\t<td>월</td>\r\n");
      out.write("\t<td>화</td>\r\n");
      out.write("\t<td>수</td>\r\n");
      out.write("\t<td>목</td>\r\n");
      out.write("\t<td>금</td>\r\n");
      out.write("\t<td>토</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr height=\"100\" align=\"left\" valign=\"top\">\r\n");

for(int i = 1; i < dayOfWeek; i++){

      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<td>&nbsp;</td>\r\n");

}

int lastDay = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

for(int i = 1; i<= lastDay; i++){

      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write(" \r\n");
      out.write("\t\r\n");
      out.write("\t<td>\r\n");
      out.write("\t\t");
      out.print(callist(year, month, i) );
      out.write("&nbsp;");
      out.print(showpen(year, month, i) );
      out.write("\r\n");
      out.write("\t \t");
      out.print(makeTable(year, month, i, calList) );
      out.write("\r\n");
      out.write("\t</td>\r\n");

	if((i+ dayOfWeek - 1)%7==0){
	
      out.write("\r\n");
      out.write("\t\t</tr height=\"100\" align=\"left\" valign=\"top\"><tr>\r\n");
      out.write("\t");
	
	}
}

for(int i = 0; i< (7-(dayOfWeek + lastDay -1)%7)%7; i++){

      out.write("\r\n");
      out.write("\t<td>&nbsp;</td>\r\n");

}

      out.write("\r\n");
      out.write("\r\n");
      out.write("</tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
