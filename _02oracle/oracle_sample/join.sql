/*
  JOIN : 여러개의 테이블에서 원하는 자료를 조회하기 위한 작업

  조인연산 = 커티션 곱 + 선택연산
*/

--ANSI SQL
SELECT EMPLOYEE_ID, FIRST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_NAME
,B.MANAGER_ID
FROM EMPLOYEES A INNER JOIN DEPARTMENTS B
  ON A.DEPARTMENT_ID = B.DEPARTMENT_ID; --INNER JOIN 

--ORACLE SQL

SELECT EMPLOYEE_ID, FIRST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_ID,
DEPARTMENT_NAME, B.MANAGER_ID
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID;

--ANSI 3 TABLE JOIN
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_ID,
  C.JOB_ID, A.JOB_ID, B.DEPARTMENT_NAME, C.JOB_TITLE
FROM EMPLOYEES A INNER JOIN DEPARTMENTS B
ON A.DEPARTMENT_ID = B.DEPARTMENT_ID
JOIN JOBS C ON A.JOB_ID = C.JOB_ID;

--ORACLE 3 TABLE JOIN

SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_ID,
  C.JOB_ID, A.JOB_ID, B.DEPARTMENT_NAME, C.JOB_TITLE
FROM EMPLOYEES A, DEPARTMENTS B, JOBS C
WHERE A.JOB_ID = C.JOB_ID
  AND A.DEPARTMENT_ID = B.DEPARTMENT_ID;

--OUT JOIN (LEFT, RIGHT)

-- ANSI LEFT
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_ID, B.DEPARTMENT_NAME
FROM EMPLOYEES A LEFT OUTER JOIN DEPARTMENTS B
 ON A.DEPARTMENT_ID = B.DEPARTMENT_ID;
  
--ORACLE LEFT  

SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_ID, B.DEPARTMENT_NAME
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID(+);


-- ANSI LEFT
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_ID, B.DEPARTMENT_NAME
FROM EMPLOYEES A LEFT OUTER JOIN DEPARTMENTS B
 ON A.DEPARTMENT_ID = B.DEPARTMENT_ID
 WHERE B.DEPARTMENT_ID IS NULL;

--ORACLE LEFT
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_ID, B.DEPARTMENT_NAME
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID(+)
  AND B.DEPARTMENT_ID IS NULL;

--ANSI RIGHT 

SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_ID, B.DEPARTMENT_NAME
FROM EMPLOYEES A RIGHT OUTER JOIN DEPARTMENTS B
 ON A.DEPARTMENT_ID = B.DEPARTMENT_ID
 WHERE A.DEPARTMENT_ID IS NULL;
 
 -- ORACLE RIGHT
 SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_ID, B.DEPARTMENT_NAME
FROM EMPLOYEES A ,DEPARTMENTS B
 WHERE A.DEPARTMENT_ID(+) = B.DEPARTMENT_ID
 AND A.DEPARTMENT_ID IS NULL;
 
 -- Steven King 의 부서명을 출력
 
 SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.LAST_NAME, B.DEPARTMENT_ID, B.DEPARTMENT_NAME
FROM EMPLOYEES A JOIN DEPARTMENTS B
ON A.DEPARTMENT_ID = B.DEPARTMENT_ID
 WHERE A.FIRST_NAME = 'Steven'
 AND A.LAST_NAME = 'King';
 
 -- IT 부서명에서 근무하고 있는 사람들을 출력
 
 SELECT A.SALARY,A.LAST_NAME ,B.DEPARTMENT_NAME 
-- NVL2(A.SALARY, MAX(SALARY) OVER(PARTITION BY B.DEPARTMENT_NAME, 1, 0)
 FROM EMPLOYEES A JOIN DEPARTMENTS B
 ON A.DEPARTMENT_ID = B.DEPARTMENT_ID
 WHERE B.DEPARTMENT_NAME = 'IT' AND A.SALARY = (
 SELECT DISTINCT MAX(SALARY) OVER(PARTITION BY B.DEPARTMENT_NAME)
 FROM EMPLOYEES A JOIN DEPARTMENTS B
 ON A.DEPARTMENT_ID = B.DEPARTMENT_ID
 WHERE B.DEPARTMENT_NAME = 'IT'
 );
 
 
 
 
 
 

-- AND B.DEPARTMENT_NAME = 'IT';

--INNER JOIN
SELECT COUNT(*)
FROM EMPLOYEES A JOIN DEPARTMENTS B
  ON A.DEPARTMENT_ID = B.DEPARTMENT_ID;
  
SELECT COUNT(*)
FROM EMPLOYEES A RIGHT OUTER JOIN DEPARTMENTS B
  ON A.DEPARTMENT_ID = B.DEPARTMENT_ID;  

SELECT A.EMPLOYEE_ID, A.DEPARTMENT_ID, B.DEPARTMENT_ID, B.DEPARTMENT_NAME
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID(+)
ORDER BY B.DEPARTMENT_NAME NULLS FIRST;

--ANSI FULL OUTER JOIN
SELECT A.EMPLOYEE_ID, A.LAST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_ID, B.DEPARTMENT_NAME
FROM EMPLOYEES A FULL OUTER JOIN DEPARTMENTS B
ON A.DEPARTMENT_ID = B.DEPARTMENT_ID;

--ORACLE FULL OUTER JOIN
SELECT A.EMPLOYEE_ID, A.LAST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_ID, B.DEPARTMENT_NAME
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID(+)
UNION
SELECT A.EMPLOYEE_ID, A.LAST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_ID, B.DEPARTMENT_NAME
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID(+) = B.DEPARTMENT_ID;

--SELF JOIN
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.MANAGER_ID,
B.EMPLOYEE_ID, B.FIRST_NAME, B.MANAGER_ID
FROM EMPLOYEES A, EMPLOYEES B
WHERE A.MANAGER_ID = B.EMPLOYEE_ID;
 
 SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.MANAGER_ID
 FROM EMPLOYEES A
 --START WITH A.MANAGER_ID IS NOT NULL
 CONNECT BY PRIOR A.MANAGER_ID = A.EMPLOYEE_ID; -- PRIOR이 매니저에 붙으면 상향식
                                                -- PRIOR이 부하직원에 붙으면 하향식
                                                
-- 문제1) EMPLOYEES 테이블과 DEPARTMENTS 테이블을 Cartesian Product(모든 가능한 행들의 Join)하여 사원번호,이름,업무,부서번호,부서명,근무지를 출력하여라.

SELECT A.EMPLOYEE_ID, A.LAST_NAME, A.JOB_ID, A.DEPARTMENT_ID, B.DEPARTMENT_NAME, B.LOCATION_ID
FROM EMPLOYEES A, DEPARTMENTS B;
                                         
 --문제2) EMPLOYEES 테이블에서 사원번호,이름,업무, EMPLOYEES 테이블의 부서번호, DEPARTMENTS 테이블의 부서번호,부서명,근무지를 출력하여라.

SELECT A.EMPLOYEE_ID, A.LAST_NAME, A.JOB_ID, A.DEPARTMENT_ID, B.DEPARTMENT_ID, B.DEPARTMENT_NAME, B.LOCATION_ID
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID;

select a.employee_id, a.last_name, a.job_id, a.department_id,
b.department_id, b.department_name, b.location_id
from employees a, departments b
where a.department_id = b.department_id
order by b.DEPARTMENT_ID;

--문제3) Alexander Hunold 의 부서명을 출력하라.

SELECT A.FIRST_NAME, A.LAST_NAME, B.DEPARTMENT_NAME
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
AND A.FIRST_NAME = 'Alexander'
AND A.LAST_NAME = 'Hunold';

SELECT b.DEPARTMENT_NAME
FROM EMPLOYEES a, DEPARTMENTS b
WHERE a.DEPARTMENT_ID = b.DEPARTMENT_ID
AND a.LAST_NAME = 'Hunold' AND a.FIRST_NAME = 'Alexander';

--문제4) 세일즈 부서에서 근무하고 있는 사람들을 출력하라.

SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.LAST_NAME, B.DEPARTMENT_NAME
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
AND B.DEPARTMENT_NAME = 'Sales';
 
 /*문제5) EMPLOYEES 테이블과 DEPARTMENTS 테이블의 부서번호를 조인하고
SA_MAN 사원만의 사원번호,이름,급여,부서명,근무지를 출력하라.
(Alias를 사용)*/

SELECT A.EMPLOYEE_ID AS 사원번호, A.LAST_NAME AS 이름, A.SALARY AS 급여,
B.DEPARTMENT_NAME AS 부서명, B.LOCATION_ID AS 근무지, A.JOB_ID AS 업무
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
AND A.JOB_ID = 'SA_MAN';

/*
문제6) EMPLOYEES 테이블과 DEPARTMENTS 테이블에서 DEPARTMENTS 테이블에 있는 모든 자료를 사원번호,이름,업무, EMPLOYEES 테이블의 부서번호,
DEPARTMENTS 테이블의 부서번호,부서명,근무지를 출력하여라
(Outer Join)
*/
SELECT A.EMPLOYEE_ID, A.LAST_NAME, A.JOB_ID, A.DEPARTMENT_ID, B.DEPARTMENT_ID, B.DEPARTMENT_NAME, B.LOCATION_ID
FROM EMPLOYEES A RIGHT OUTER JOIN DEPARTMENTS B
ON A.DEPARTMENT_ID = B.DEPARTMENT_ID;
 
 
 --문제7) EMPLOYEES 테이블에서 Self join하여 관리자(매니저)를 출력하여라.
SELECT A.EMPLOYEE_ID, A.FIRST_NAME || '의 관리자는 ' || B.FIRST_NAME || '이다'
FROM EMPLOYEES A, EMPLOYEES B
WHERE A.MANAGER_ID = B.EMPLOYEE_ID;

/*문제8) EMPLOYEES 테이블에서 left join하여 관리자(매니저)를 출력하고
매니저 아이디가 없는 사람은 배제하고 하향식으로 하며, 급여는 역순으로 
출력하라.*/

SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.MANAGER_ID, B.EMPLOYEE_ID, B.FIRST_NAME, B.LAST_NAME, A.SALARY
FROM EMPLOYEES A LEFT JOIN EMPLOYEES B
ON A.MANAGER_ID = B.EMPLOYEE_ID
START WITH A.MANAGER_ID IS NOT NULL
CONNECT BY A.MANAGER_ID = PRIOR A.EMPLOYEE_ID
ORDER BY A.SALARY DESC;


--문제9) EMPLOYEES 테이블에서 right join하여 관리자(매니저)가 108번
--상향식으로 급여는 역순으로 출력하라.

SELECT  LPAD(' ', 3*(level-1))|| A.FIRST_NAME, A.SALARY
FROM EMPLOYEES B RIGHT JOIN EMPLOYEES A
ON A.MANAGER_ID = B.EMPLOYEE_ID
--START WITH A.MANAGER_ID IS NOT NULL
START WITH A.MANAGER_ID = 108
CONNECT BY PRIOR A.MANAGER_ID = A.EMPLOYEE_ID
ORDER SIBLINGS BY A.SALARY DESC;

/*
SELECT B.DEPARTMENT_NAME, MAX(A.SALARY)
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID 
AND B.DEPARTMENT_NAME = 'IT'
GROUP BY B.DEPARTMENT_NAME;*/



